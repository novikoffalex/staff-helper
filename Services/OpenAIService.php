<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class OpenAIService
{
    private string $apiKey;
    private string $model;

    public function __construct()
    {
        $this->apiKey = config('openai.api_key');
        $this->model = config('openai.model', 'gpt-4');
    }

    public function generateResponse(string $userMessage, array $conversationHistory = [], array $userContext = []): string
    {
        $systemPrompt = $this->buildSystemPrompt($userContext);
        
        $messages = [
            ['role' => 'system', 'content' => $systemPrompt]
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        foreach ($conversationHistory as $message) {
            $messages[] = [
                'role' => $message['role'],
                'content' => $message['content']
            ];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $messages[] = ['role' => 'user', 'content' => $userMessage];

        $response = Http::withHeaders([
            'Authorization' => "Bearer {$this->apiKey}",
            'Content-Type' => 'application/json'
        ])->post('https://api.openai.com/v1/chat/completions', [
            'model' => $this->model,
            'messages' => $messages,
            'max_tokens' => 500,
            'temperature' => 0.7
        ]);

        if (!$response->successful()) {
            Log::error('OpenAI API error', [
                'status' => $response->status(),
                'response' => $response->body()
            ]);
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
        }

        $result = $response->json();
        
        if (isset($result['choices'][0]['message']['content'])) {
            return $result['choices'][0]['message']['content'];
        }

        Log::error('Unexpected OpenAI response', ['response' => $result]);
        return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.";
    }

    public function transcribeAudio(string $audioContent): string
    {
        $response = Http::withHeaders([
            'Authorization' => "Bearer {$this->apiKey}"
        ])->attach('file', $audioContent, 'voice.ogg')
          ->post('https://api.openai.com/v1/audio/transcriptions', [
            'model' => 'whisper-1',
            'language' => 'ru'
        ]);

        if (!$response->successful()) {
            Log::error('OpenAI Whisper API error', [
                'status' => $response->status(),
                'response' => $response->body()
            ]);
            return '';
        }

        $result = $response->json();
        return $result['text'] ?? '';
    }

    private function buildSystemPrompt(array $userContext = []): string
    {
        $userName = $userContext['first_name'] ?? 'User';
        $lastSeen = $userContext['last_seen_at'] ?? null;
        
        $prompt = "–¢—ã Staff Helper AI Bot - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º. 

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
- –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–±–æ—á–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$userName}.";

        if ($lastSeen) {
            $lastSeenFormatted = date('d.m.Y H:i', strtotime($lastSeen));
            $prompt .= "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {$lastSeenFormatted}";
        }

        return $prompt;
    }
}
